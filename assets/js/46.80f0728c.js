(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{326:function(t,s,e){"use strict";e.r(s);var a=e(14),n=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("众所周知，用http可以实现从客户端请求服务端的消息，用websocket可以实现客户端和服务器的双向通信，但用SSE实现服务端主动推送的比较少。"),s("br"),t._v("\nSSE相当于http的优点是可以由服务端主动推送消息。SSE相当于websocket的优点是断开连接后可以自动重连。")]),t._v(" "),s("h1",{attrs:{id:"使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),s("ul",[s("li",[t._v("消息统一推送")]),t._v(" "),s("li",[t._v("数据实时更新")]),t._v(" "),s("li",[t._v("代替轮询")])]),t._v(" "),s("h1",{attrs:{id:"使用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用方法"}},[t._v("#")]),t._v(" 使用方法")]),t._v(" "),s("p",[t._v("node的话，可以用阮老师的例子"),s("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2017/05/server-sent_events.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("node实现SSE"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("python可以参考下面的代码")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('from flask import Flask, Response\nimport time\nimport json\n\napp = Flask(__name__)\n\ndef message_to_send():\n    time.sleep(5)\n    return json.dumps({"message": "hello"})\n\n\n@app.route("/stream")\ndef stream():\n    def event_stream():\n        while True:\n            print("send")\n            yield "data:  {}\\n\\n".format(message_to_send())\n\n    return Response(\n        event_stream(),\n        mimetype="text/event-stream",\n        headers={"Access-Control-Allow-Origin": "*"},\n    )\n\n\nif __name__ == "__main__":\n    app.run()\n\n')])])]),s("h1",{attrs:{id:"传递post参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#传递post参数"}},[t._v("#")]),t._v(" 传递post参数")]),t._v(" "),s("p",[t._v("默认情况下，"),s("code",[t._v("sse")]),t._v("只能进行"),s("code",[t._v("get")]),t._v("请求，参数跟在url后面。借助"),s("code",[t._v("@microsoft/fetch-event-source")]),t._v("可以传递post参数。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetchEventSource")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/api/sse'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("method")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'POST'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("headers")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v("'Content-Type'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'application/json'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("body")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h1",{attrs:{id:"注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),s("ul",[s("li",[t._v("想要跨域需要设置"),s("code",[t._v("withCredentials: true")]),t._v("或服务端设置允许跨域。（"),s("code",[t._v("@microsoft/fetch-event-source")]),t._v("可以不用设置）")]),t._v(" "),s("li",[t._v("接口必须设置"),s("code",[t._v("mimetype")]),t._v("为"),s("code",[t._v("text/event-stream")])]),t._v(" "),s("li",[t._v("接口返回的每条消息必须以"),s("code",[t._v("\\n")]),t._v("结尾，最后一条消息以"),s("code",[t._v("\\n\\n")]),t._v("结尾")]),t._v(" "),s("li",[t._v("有连接个数限制，每个域名下好像是限制6个")]),t._v(" "),s("li",[t._v("如果想测试自动重连，可以先关闭服务端的服务再打开")])])])}),[],!1,null,null,null);s.default=n.exports}}]);