(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{314:function(s,n,t){"use strict";t.r(n);var e=t(14),a=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"cicd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cicd"}},[s._v("#")]),s._v(" CICD")]),s._v(" "),n("p",[s._v("CICD 是“持续集成”（Continuous Integration）和“持续交付/部署”（Continuous Delivery/Deployment）的缩写。它是一种软件开发实践，旨在通过自动化工具和流程提高软件开发的质量和效率。")]),s._v(" "),n("p",[s._v("持续集成要求开发人员频繁地将代码提交到共享的版本控制系统中。")]),s._v(" "),n("p",[s._v("持续集成的流程：")]),s._v(" "),n("ol",[n("li",[s._v("开发人员提交代码到版本控制系统（如 Git）。")]),s._v(" "),n("li",[s._v("自动化构建系统自动拉取最新的代码。 ")]),s._v(" "),n("li",[s._v("执行自动化构建和测试。 ")]),s._v(" "),n("li",[s._v("发现并报告错误或失败的测试。")])]),s._v(" "),n("p",[s._v("持续交付是在持续集成的基础上进一步扩展，确保每次提交的代码都可以随时部署到生产环境中。")]),s._v(" "),n("p",[s._v("持续交付的流程：")]),s._v(" "),n("ol",[n("li",[s._v("自动化构建和测试。")]),s._v(" "),n("li",[s._v("自动化部署到测试环境。")]),s._v(" "),n("li",[s._v("手动或自动化部署到生产环境。")])]),s._v(" "),n("p",[s._v("持续部署是在持续交付的基础上进一步扩展，自动将通过测试的代码部署到生产环境中。")]),s._v(" "),n("p",[s._v("持续部署的流程：")]),s._v(" "),n("ol",[n("li",[s._v("自动化构建和测试。")]),s._v(" "),n("li",[s._v("自动化部署到测试环境。 ")]),s._v(" "),n("li",[s._v("自动化部署到生产环境。")])]),s._v(" "),n("h1",{attrs:{id:"github-actions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#github-actions"}},[s._v("#")]),s._v(" Github Actions")]),s._v(" "),n("p",[s._v("GitHub Actions 是 GitHub 提供的一种强大的自动化工具，用于自动化构建、测试和部署代码。它允许你在 GitHub 仓库中直接编写和运行工作流（workflows），从而实现持续集成（CI）和持续部署（CD）。")]),s._v(" "),n("p",[s._v("Workflow：一个工作流（workflow）是由一系列步骤（steps）组成的 YAML 文件，用于定义自动化任务。")]),s._v(" "),n("p",[s._v("Job：一个工作流可以包含一个或多个作业（job），每个作业在不同的虚拟环境中运行。")]),s._v(" "),n("p",[s._v("Step：每个作业由一系列步骤（step）组成，每个步骤可以执行 shell 命令、运行脚本或使用预定义的动作（action）。")]),s._v(" "),n("p",[s._v("Action：动作（action）是 GitHub Actions 中的基本构建块，可以是自定义的脚本、容器或预定义的社区动作。")]),s._v(" "),n("p",[s._v("工作流的触发方式有很多，一般使用"),n("strong",[s._v("push")]),s._v("。")]),s._v(" "),n("p",[s._v("常用动作如下所示：")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    - name: Checkout Repository\n      uses: actions/checkout@v3 # 检出仓库中的代码\n\n    - name: Setup Node.js\n      uses: actions/setup-node@v3 # 设置node环境\n      with:\n        node-version: 16\n\n    - name: Install Dependencies\n      run: npm install # 运行shell脚本或命令\n\n    env: # 定义环境变量\n      NODE_ENV: production\n      DATABASE_URL: ${{ secrets.DATABASE_URL }}\n")])])]),n("h1",{attrs:{id:"创建工作流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建工作流"}},[s._v("#")]),s._v(" 创建工作流")]),s._v(" "),n("p",[s._v("在项目根目录下，创建文件.github/workflows/deploy.yml，内容如下所示，")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    name: Deploy to GitHub Pages # 定义工作流的名称\n\n    on: # 定义触发工作流的事件，如push、pull_request等\n      push: # 当有代码推送到特定分支时触发工作流\n        branches: # 限定触发工作的分支，数组\n          - main\n    \tif: contains(github.event.head_commit.message, 'deploy') # 当提交一个包含 deploy 关键字的 commit 时触发\n    # 以上，总的来说，在main分支提交包含 deploy 的commit 时，会触发工作流\n\n    jobs: # 定义工作流中的作业（job）\n      build-and-deploy: # 定义一个名为 build-and-deploy 的作业，每个作业有一个唯一的名称\n        runs-on: ubuntu-latest # 指定作业运行的操作系统环境\n\n        steps: # 定义作业中的步骤（step）\n        - name: Checkout Repository # name 定义步骤的名称，便于识别和调试\n          uses: actions/checkout@v3 # 使用预定义的 actions/checkout 动作来检出代码。\n          # uses 后面指定动作的来源和版本，actions/checkout@v3 表示使用 actions/checkout 的第 3 版本。\n\n        - name: Setup Node.js\n          uses: actions/setup-node@v3 # 使用预定义的 actions/setup-node 动作来设置 Node.js 环境。\n          with: # 定义动作的输入参数\n            node-version: 20\n        \n        - name: Clear Cache\n          run: | # 执行 shell 命令或脚本。run 后面指定要执行的命令或脚本，| 表示多行命令。\n            rm -rf package-lock.json node_modules # 删除 package-lock.json 和 node_modules 目录。\n\n        - name: Install Dependencies\n          run: npm install # 安装项目依赖\n\n        - name: Build Project\n          run: npm run build # 构建项目\n\n        - name: Deploy to GitHub Pages\n          uses: peaceiris/actions-gh-pages@v3 # 使用预定义的 peaceiris/actions-gh-pages 动作来部署项目到 GitHub Pages。\n          with:\n            github_token: ${{ secrets.GITHUB_TOKEN }}\n            publish_dir: ./dist\n            user_name: 'your name'\n            user_email: 'your email'\n")])])]),n("p",[s._v("另外，项目需要添加base路径配置，")]),s._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// vite.config.js")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("base")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("env"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NODE_ENV")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'production'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/your repository/'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n")])])]),n("p",[s._v("然后确保"),n("code",[s._v("Settings/Pages/Build and deployment中")]),s._v("，branch为"),n("strong",[s._v("gh-pages")]),s._v("，目录为/(root)。")]),s._v(" "),n("p",[s._v("最后，通过"),n("code",[s._v("Settings/Pages/Github Pages")]),s._v("下显示的地址就可以访问项目了。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20241007235921.png",alt:"image"}})]),s._v(" "),n("h1",{attrs:{id:"可能遇到的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可能遇到的问题"}},[s._v("#")]),s._v(" 可能遇到的问题")]),s._v(" "),n("p",[s._v("问题1：推送无权限")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20241007225937.png",alt:"image"}})]),s._v(" "),n("p",[s._v("解决办法：")]),s._v(" "),n("p",[s._v("检查权限设置，在"),n("code",[s._v("Settings/Actions/General/Workflow permissions")]),s._v("配置中，选择"),n("code",[s._v("Read and write permissions")]),s._v("。")]),s._v(" "),n("p",[s._v("问题2：Cannot find module @rollup/rollup-linux-x64-gnu.")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20241007230511.png",alt:"image"}})]),s._v(" "),n("p",[s._v("解决办法：")]),s._v(" "),n("p",[s._v("清除缓存，在"),n("strong",[s._v("npm install")]),s._v("前添加如下配置，")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("   - name: Clear Cache\n      run: |\n        rm -rf package-lock.json node_modules\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);